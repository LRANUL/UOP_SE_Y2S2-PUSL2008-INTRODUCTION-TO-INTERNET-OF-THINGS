{"version":3,"sources":["./src/app/login/login.page.html","./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login.page.scss","./src/app/login/login.page.ts"],"names":[],"mappings":"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","file":"login-login-module-es2015.js","sourcesContent":["export default \"<div name=\\\"loading\\\" *ngIf=\\\"loading\\\" style=\\\"height: 100%;\\\">\\r\\n  <ion-img src=\\\"assets/icon/splash.png\\\" style=\\\"height: 80%;\\\"></ion-img>\\r\\n  <br>\\r\\n  <ion-img src=\\\"assets/icon/loading.png\\\" style=\\\"height: 50px;\\\"></ion-img>\\r\\n</div>\\r\\n<ion-content [hidden]=\\\"!login\\\">\\r\\n  <div class=\\\"login\\\">\\r\\n    <ion-card class=\\\"card\\\">\\r\\n      <ion-card-header>\\r\\n        <ion-card-title>Login</ion-card-title>\\r\\n      </ion-card-header>\\r\\n      <ion-card-content>\\r\\n        <form class=\\\"form\\\" [formGroup]=\\\"validations_form\\\" (ngSubmit)=\\\"loginUser(validations_form.value)\\\">\\r\\n          <ion-item>\\r\\n\\r\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">NSBM Email Address</ion-label>\\r\\n            <ion-input class=\\\"textinput\\\" type=\\\"text\\\" clearInput formControlName=\\\"email\\\" ngModel\\r\\n              pattern=\\\"(\\\\W|^)[\\\\w.+\\\\-]*@(students.)?nsbm\\\\.lk(\\\\W|$)\\\">\\r\\n            </ion-input>\\r\\n          </ion-item>\\r\\n\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n          <ion-item>\\r\\n\\r\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\r\\n            <ion-input class=\\\"textinput\\\" type=\\\"password\\\" clearInput formControlName=\\\"password\\\" class=\\\"form-controll\\\"\\r\\n              required>\\r\\n            </ion-input>\\r\\n          </ion-item>\\r\\n\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n            <ion-button shape=\\\"round\\\" fill=\\\"outline\\\" color=\\\"success\\\" expand=\\\"full\\\" class=\\\"submit-btn\\\" type=\\\"submit\\\"\\r\\n              [disabled]=\\\"!validations_form.valid\\\" style=\\\"text-align: center;\\\">Log In</ion-button>\\r\\n\\r\\n            <label class=\\\"error-message\\\">{{errorMessage}}</label>\\r\\n          </div>\\r\\n        </form>\\r\\n        <p class=\\\"go-to-register\\\">\\r\\n          No account yet? <a style=\\\"color: rgb(4, 98, 153)\\\" (click)=\\\"goToRegisterPage()\\\">Create an account.</a>\\r\\n        </p>\\r\\n      </ion-card-content>\\r\\n    </ion-card>\\r\\n  </div>\\r\\n  <!-- Loading Spinner -->\\r\\n  <div style=\\\"position: absolute;\\r\\n              left: 50%;\\r\\n              transform: translateX(-50%);\\\">\\r\\n    <ion-spinner name=\\\"crescent\\\" color=\\\"primary\\\" style=\\\"height: 100px;\\r\\n                                                          width: 100px;\\\" *ngIf=\\\"loginLoadingSpinner\\\"></ion-spinner>\\r\\n  </div>\\r\\n  <div style=\\\"position: absolute; bottom: 0px; width: 100%;font-size: small;color:grey\\\">\\r\\n    <div style=\\\"text-align: center\\\"><i>THIS IS AN EDUCATIONAL PROJECT, CREDITS TO AUTHORS ARE ADDED WERE POSSIBLE,\\r\\n        DEVELOPED UNDER FAIR USE LICENSE FOR EDUCATIONAL\\r\\n        PURPOSES ONLY.</i>\\r\\n    </div>\\r\\n  </div>\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule { }","export default \".register {\\n  padding: 1px;\\n  height: 100%;\\n  width: 100%;\\n  background-image: url(/assets/images/backgrounds/login.png);\\n  background-repeat: no-repeat;\\n  background-size: cover; }\\n\\n.card {\\n  text-align: center;\\n  margin-top: 10%;\\n  font-size: x-large;\\n  opacity: 0.9; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vQzpcXFVzZXJzXFxyYW51bFxcRG9jdW1lbnRzXFxHaXRIdWJcXDJuZCBZZWFyXFwybmQgU2VtZXN0ZXJcXFVPUF9TRV9ZMlMyLVBVU0wyMDA4LUlOVFJPRFVDVElPTi1UTy1JTlRFUk5FVC1PRi1USElOR1NcXFdvcmtzcGFjZVxcaVNBTS9zcmNcXGFwcFxcbG9naW5cXGxvZ2luLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQVk7RUFDWixZQUFZO0VBQ1osV0FBVztFQUNYLDJEQUEyRDtFQUMzRCw0QkFBNEI7RUFDNUIsc0JBQXFCLEVBQUE7O0FBR3pCO0VBQ0ssa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsWUFBWSxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlZ2lzdGVyIHtcclxuICAgIHBhZGRpbmc6IDFweDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmRzL2xvZ2luLnBuZyk7XHJcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgYmFja2dyb3VuZC1zaXplOmNvdmVyO1xyXG4gICAgIFxyXG59XHJcbi5jYXJkIHtcclxuICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgbWFyZ2luLXRvcDogMTAlO1xyXG4gICAgIGZvbnQtc2l6ZTogeC1sYXJnZTtcclxuICAgICBvcGFjaXR5OiAwLjk7XHJcbn1cclxuIl19 */\"","import { FirebaseService } from './../services/firebase.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NavController, AlertController } from '@ionic/angular';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport * as firebase from 'firebase';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { Router } from '@angular/router';\r\n@Component({ selector: 'app-login', templateUrl: './login.page.html', styleUrls: ['./login.page.scss'] })\r\nexport class LoginPage implements OnInit {\r\n\r\n    validations_form: FormGroup;\r\n    errorMessage: string = '';\r\n    userEmail: string;\r\n    login:Boolean = false;\r\n    loginLoadingSpinner: Boolean = false;\r\n    loading: boolean;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        public navCtrl: NavController,\r\n        private authService: FirebaseService,\r\n        public loadingController: LoadingController,\r\n        private formBuilder: FormBuilder,\r\n        private alertController: AlertController\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.loading = true;\r\n        setTimeout(() => {\r\n            this.loading = false;\r\n            this.login = true;\r\n        }, 3000);\r\n\r\n        firebase.auth().onAuthStateChanged(async (user) => {\r\n            if (user) { // User is signed in.\r\n\r\n                // Setting loading spinner to spin\r\n                this.loginLoadingSpinner = true;\r\n\r\n                // console.log('User is signed in');\r\n                /*MOBILE APP */\r\n                // const loading = await this.loadingController.create({message: 'Please wait...', duration: 2000});\r\n                // await loading.present();\r\n\r\n                // const {role, data} = await loading.onDidDismiss();\r\n                // console.log('Loading dismissed!');\r\n\r\n                this.userEmail = this.authService.userDetails().email;\r\n\r\n\r\n                /*-- Lecturer User Registration Process Phase --*/\r\n                // console.log('Current router url: ', this.router.url);\r\n\r\n                // After new lecturer account is created, that user will be automatically logged in usder the program office user interface\r\n                // If the router url is the program office user interface and if the user type is 'lecturerUser', the currently logged in user will be logged out\r\n                if (this.router.url == '/office/lecturers') {\r\n\r\n                    let loggedUserDetails = this.authService.userDetails();\r\n                    // Checking if logged in user type in a lecturer user\r\n                    this.authService.retrieveLoggedInUserDetailsLecturer(loggedUserDetails.uid).subscribe(response => {\r\n                        if (response.length > 0) {\r\n                            // Logging out the current logged in user as the user type is 'lecturerUser' and it is in the program office user interface router url\r\n                            this.authService.logoutUser();\r\n                            // Redirecting user to the login screen\r\n                            this.router.navigate(['/login']);\r\n\r\n                            // console.log(\"Lecturer Registration: Record found in lecturer users collection, Logged out\");\r\n                        }\r\n                        else {\r\n                            // console.log(\"Record not found in lecturer users collection\");\r\n                        }\r\n                    }, error => {\r\n                        // console.log(\"Error: \" + error);\r\n                        this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                    });\r\n\r\n                }\r\n                /*-- Lecturer User Registration Process Phase --*/\r\n\r\n\r\n\r\n                const loggedInUserDetails = this.authService.userDetails();\r\n\r\n                /* Redirecting the user to their relevant user interface according to the user type */\r\n                // Checking if logged in user type in a student user\r\n                this.authService.retrieveLoggedInUserDetailsStudent(loggedInUserDetails.uid).subscribe(response => {\r\n                    if (response.length > 0) {\r\n\r\n                        /* Process of checking account status is ACTIVE or not */\r\n                        let resgisteredStudentUser = response;\r\n                        let studentUserAccountStatus;\r\n\r\n                        // Retrieving the account status of this student user account\r\n                        resgisteredStudentUser.forEach(document => {\r\n                            let firestoreDoc: any = document.payload.doc.data();\r\n                            studentUserAccountStatus = firestoreDoc.accountStatus;\r\n                        });\r\n\r\n                        // Checking if the student user account is active\r\n                        if(studentUserAccountStatus == \"Active\"){\r\n                            this.router.navigate(['student']);\r\n                            // console.log(\"Logged In User Type: Student User\");\r\n                            // console.log(\"Record found in student users collection\");\r\n                            // console.log(\"Student User Account is ACTIVE\");\r\n                        }\r\n                        else{\r\n                            this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                            this.authService.logoutUser();\r\n                            this.router.navigate([\"/login\"]);\r\n                            // console.log(\"Student User Account is not ACTIVE\");\r\n                        }\r\n\r\n\r\n                        // Setting loading spinner to stop spinning\r\n                        this.loginLoadingSpinner = false;\r\n                    }\r\n                    else {\r\n                        // console.log(\"Record not found in student users collection\");\r\n                    }\r\n                }, error => {\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n\r\n                    // console.log(\"Error: \" + error);\r\n                    this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                });\r\n\r\n                // Checking if logged in user type in a lecturer user\r\n                this.authService.retrieveLoggedInUserDetailsLecturer(loggedInUserDetails.uid).subscribe(response => {\r\n                    if (response.length > 0) {\r\n\r\n                        /* Process of checking account status is ACTIVE or not */\r\n                        let resgisteredLecturerUser = response;\r\n                        let lecturerUserAccountStatus;\r\n\r\n                        // Retrieving the account status of this lecturer user account\r\n                        resgisteredLecturerUser.forEach(document => {\r\n                            let firestoreDoc: any = document.payload.doc.data();\r\n                            lecturerUserAccountStatus = firestoreDoc.accountStatus;\r\n                        });\r\n\r\n                        // Checking if the lecturer user account is active\r\n                        if(lecturerUserAccountStatus == \"Active\"){\r\n                            this.router.navigate(['lecturer']);\r\n                            // console.log(\"Logged In User Type: Lecturer User\");\r\n                            // console.log(\"Record found in lecturer users collection\");\r\n                            // console.log(\"Lecturer User Account is ACTIVE\");\r\n                        }\r\n                        else{\r\n                            this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                            this.authService.logoutUser();\r\n                            this.router.navigate([\"/login\"]);\r\n                            // console.log(\"Lecturer User Account is not ACTIVE\");\r\n                        }\r\n\r\n\r\n                        // Setting loading spinner to stop spinning\r\n                        this.loginLoadingSpinner = false;\r\n                    }\r\n                    else {\r\n                        // console.log(\"Record not found in lecturer users collection\");\r\n                    }\r\n                }, error => {\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n\r\n                    // console.log(\"Error: \" + error);\r\n                    this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                });\r\n\r\n                // Checking if logged in user type in a program office user\r\n                this.authService.retrieveLoggedInUserDetailsProgramOffice(loggedInUserDetails.uid).subscribe(response => {\r\n                    if (response.length > 0) {\r\n\r\n                        /* Process of checking account status is ACTIVE or not */\r\n                        let resgisteredProgramOfficeUser = response;\r\n                        let programOfficeUserAccountStatus;\r\n\r\n                        // Retrieving the account status of this program office user account\r\n                        resgisteredProgramOfficeUser.forEach(document => {\r\n                            let firestoreDoc: any = document.payload.doc.data();\r\n                            programOfficeUserAccountStatus = firestoreDoc.accountStatus;\r\n                        });\r\n                        \r\n                        // Checking if the program office user account is active\r\n                        if(programOfficeUserAccountStatus == \"Active\"){\r\n\r\n                            this.router.navigate(['/office/dashboard']);\r\n                            // console.log(\"Logged In User Type: Program Office User\");\r\n                            // console.log(\"Record found in program office users collection\");\r\n                            // console.log(\"Program Office User Account is ACTIVE\");\r\n\r\n                        }\r\n                        else{\r\n                            this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact Web Administrator.\");\r\n                            this.authService.logoutUser();\r\n                            this.router.navigate([\"/login\"]);\r\n                            // console.log(\"Program Office User Account is not ACTIVE\");\r\n                        }\r\n\r\n\r\n                        // Setting loading spinner to stop spinning\r\n                        this.loginLoadingSpinner = false;\r\n                    }\r\n                    else {\r\n                        // console.log(\"Record not found in program office users collection\");\r\n                    }\r\n                }, error => {\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n\r\n                    // console.log(\"Error: \" + error);\r\n                    this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                });\r\n\r\n\r\n            } else { // No user is signed in.\r\n\r\n                // Setting loading spinner to stop spinning\r\n                this.loginLoadingSpinner = false;\r\n\r\n                // console.log('User is NOT signed in');\r\n            }\r\n        },\r\n            error => {\r\n                // console.log(\"Error: \" + error);\r\n            }\r\n        );\r\n        this.validations_form = this.formBuilder.group({\r\n            email: new FormControl(\"\", Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')])),\r\n            password: new FormControl(\"\", Validators.compose([Validators.minLength(5), Validators.required]))\r\n        });\r\n    }\r\n\r\n    // Alert Box Implementation\r\n    async alertNotice(title: string, content: string) {\r\n\r\n        const alert = await this.alertController.create({\r\n            header: title,\r\n            message: content,\r\n            buttons: ['OK']\r\n        });\r\n\r\n        await alert.present();\r\n    }\r\n\r\n    validation_messages = {\r\n        email: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Your NSBM University Email is required.\"\r\n            }, {\r\n                type: \"pattern\",\r\n                message: \"Please enter a valid email.\"\r\n            }\r\n        ],\r\n        password: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Password is required.\"\r\n            }, {\r\n                type: \"minlength\",\r\n                message: \"Password must be at least 5 characters long.\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    async loginUser(value) {\r\n\r\n        // Setting loading spinner to spin\r\n        this.loginLoadingSpinner = true;\r\n        /*MOBILE APP */\r\n\r\n        // const loading = await this.loadingController.create({message: 'Logging in...', duration: 2000});\r\n\r\n        // await loading.present();\r\n\r\n        // const {role, data} = await loading.onDidDismiss();\r\n        // console.log('Loading dismissed!');\r\n\r\n\r\n\r\n\r\n        this.authService.loginUser(value).then(async res => {\r\n            // console.log(res);\r\n            this.errorMessage = \"\";\r\n            this.userEmail = this.authService.userDetails().email;\r\n\r\n            // this.router.navigate(['/office/dashboard']);\r\n            // this.router.navigate(['/student/eSign']);\r\n            // this.navCtrl.navigateForward(\"lecturerHome\");\r\n            // this.navCtrl.navigateForward(\"dashboard\");\r\n\r\n\r\n            const loggedInUserDetails = this.authService.userDetails();\r\n\r\n            /* Redirecting the user to their relevant user interface according to the user type */\r\n            // Checking if logged in user type in a student user\r\n            this.authService.retrieveLoggedInUserDetailsStudent(loggedInUserDetails.uid).subscribe(response => {\r\n                if (response.length > 0) {\r\n\r\n                    /* Process of checking account status is ACTIVE or not */\r\n                    let resgisteredStudentUser = response;\r\n                    let studentUserAccountStatus;\r\n\r\n                    // Retrieving the account status of this student user account\r\n                    resgisteredStudentUser.forEach(document => {\r\n                        let firestoreDoc: any = document.payload.doc.data();\r\n                        studentUserAccountStatus = firestoreDoc.accountStatus;\r\n                    });\r\n\r\n                    // Checking if the student user account is active\r\n                    if(studentUserAccountStatus == \"Active\"){\r\n                        this.router.navigate(['student']);\r\n                        // console.log(\"Logged In User Type: Student User\");\r\n                        // console.log(\"Record found in student users collection\");\r\n                        // console.log(\"Student User Account is ACTIVE\");\r\n                    }\r\n                    else{\r\n                        this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                        // console.log(\"Student User Account is not ACTIVE\");\r\n                    }\r\n\r\n\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n                }\r\n                else {\r\n                    // console.log(\"Record not found in student users collection\");\r\n                }\r\n            }, error => {\r\n                // console.log(\"Error: \" + error);\r\n                this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n            });\r\n\r\n            // Checking if logged in user type in a lecturer user\r\n            this.authService.retrieveLoggedInUserDetailsLecturer(loggedInUserDetails.uid).subscribe(response => {\r\n                if (response.length > 0) {\r\n\r\n                    /* Process of checking account status is ACTIVE or not */\r\n                    let resgisteredLecturerUser = response;\r\n                    let lecturerUserAccountStatus;\r\n\r\n                    // Retrieving the account status of this lecturer user account\r\n                    resgisteredLecturerUser.forEach(document => {\r\n                        let firestoreDoc: any = document.payload.doc.data();\r\n                        lecturerUserAccountStatus = firestoreDoc.accountStatus;\r\n                    });\r\n\r\n                    // Checking if the lecturer user account is active\r\n                    if(lecturerUserAccountStatus == \"Active\"){\r\n                        this.router.navigate(['lecturer']);\r\n                        // console.log(\"Logged In User Type: Lecturer User\");\r\n                        // console.log(\"Record found in lecturer users collection\");\r\n                        // console.log(\"Lecturer User Account is ACTIVE\");\r\n                    }\r\n                    else{\r\n                        this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                        // console.log(\"Lecturer User Account is not ACTIVE\");\r\n                    }\r\n\r\n\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n                }\r\n                else {\r\n                    // console.log(\"Record not found in lecturer users collection\");\r\n                }\r\n            }, error => {\r\n                // console.log(\"Error: \" + error);\r\n                this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n            });\r\n\r\n            // Checking if logged in user type in a program office user\r\n            this.authService.retrieveLoggedInUserDetailsProgramOffice(loggedInUserDetails.uid).subscribe(response => {\r\n                if (response.length > 0) {\r\n\r\n                    /* Process of checking account status is ACTIVE or not */\r\n                    let resgisteredProgramOfficeUser = response;\r\n                    let programOfficeUserAccountStatus;\r\n\r\n                    // Retrieving the account status of this program office user account\r\n                    resgisteredProgramOfficeUser.forEach(document => {\r\n                        let firestoreDoc: any = document.payload.doc.data();\r\n                        programOfficeUserAccountStatus = firestoreDoc.accountStatus;\r\n                    });\r\n                    \r\n                    // Checking if the program office user account is active\r\n                    if(programOfficeUserAccountStatus == \"Active\"){\r\n\r\n                        this.router.navigate(['/office/dashboard']);\r\n                        // console.log(\"Logged In User Type: Program Office User\");\r\n                        // console.log(\"Record found in program office users collection\");\r\n                        // console.log(\"Program Office User Account is ACTIVE\");\r\n\r\n                    }\r\n                    else{\r\n                        this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact Web Administrator.\");\r\n                        // console.log(\"Program Office User Account is not ACTIVE\");\r\n                    }\r\n\r\n\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n                }\r\n                else {\r\n                    // console.log(\"Record not found in program office users collection\");\r\n                }\r\n            }, error => {\r\n                // console.log(\"Error: \" + error);\r\n                this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n\r\n                // Setting loading spinner to stop spinning\r\n                this.loginLoadingSpinner = false;\r\n            });\r\n\r\n        }, err => {\r\n            // Setting loading spinner to stop spinning\r\n            this.loginLoadingSpinner = false;\r\n\r\n            this.errorMessage = err.message;\r\n        });\r\n    }\r\n\r\n\r\n    goToRegisterPage() {\r\n        this.navCtrl.navigateForward(\"signup\");\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}