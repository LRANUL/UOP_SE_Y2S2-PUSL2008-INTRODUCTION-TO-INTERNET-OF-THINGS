{"version":3,"sources":["src/app/login/login.page.html","src/app/login/login-routing.module.ts","src/app/login/login.module.ts","src/app/login/login.page.scss","src/app/login/login.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div name=\\\"loading\\\" *ngIf=\\\"loading\\\" style=\\\"height: 100%;\\\">\\r\\n  <ion-img src=\\\"assets/icon/splash.png\\\" style=\\\"height: 80%;\\\"></ion-img>\\r\\n  <br>\\r\\n  <ion-img src=\\\"assets/icon/loading.png\\\" style=\\\"height: 50px;\\\"></ion-img>\\r\\n</div>\\r\\n<ion-content [hidden]=\\\"!login\\\">\\r\\n  <div class=\\\"login\\\">\\r\\n    <ion-card class=\\\"card\\\">\\r\\n      <ion-card-header>\\r\\n        <ion-card-title>Login</ion-card-title>\\r\\n      </ion-card-header>\\r\\n      <ion-card-content>\\r\\n        <form class=\\\"form\\\" [formGroup]=\\\"validations_form\\\" (ngSubmit)=\\\"loginUser(validations_form.value)\\\">\\r\\n          <ion-item>\\r\\n\\r\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">NSBM Email Address</ion-label>\\r\\n            <ion-input class=\\\"textinput\\\" type=\\\"text\\\" clearInput formControlName=\\\"email\\\" ngModel\\r\\n              pattern=\\\"(\\\\W|^)[\\\\w.+\\\\-]*@(students.)?nsbm\\\\.lk(\\\\W|$)\\\">\\r\\n            </ion-input>\\r\\n          </ion-item>\\r\\n\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n          </div>\\r\\n          <ion-item>\\r\\n\\r\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\r\\n            <ion-input class=\\\"textinput\\\" type=\\\"password\\\" clearInput formControlName=\\\"password\\\" class=\\\"form-controll\\\"\\r\\n              required>\\r\\n            </ion-input>\\r\\n          </ion-item>\\r\\n\\r\\n          <div class=\\\"validation-errors\\\">\\r\\n            <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\r\\n              <div class=\\\"error-message\\\"\\r\\n                *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\r\\n                {{ validation.message }}\\r\\n              </div>\\r\\n            </ng-container>\\r\\n            <ion-button shape=\\\"round\\\" fill=\\\"outline\\\" color=\\\"success\\\" expand=\\\"full\\\" class=\\\"submit-btn\\\" type=\\\"submit\\\"\\r\\n              [disabled]=\\\"!validations_form.valid\\\" style=\\\"text-align: center;\\\">Log In</ion-button>\\r\\n\\r\\n            <label class=\\\"error-message\\\">{{errorMessage}}</label>\\r\\n          </div>\\r\\n        </form>\\r\\n        <p class=\\\"go-to-register\\\">\\r\\n          No account yet? <a style=\\\"color: rgb(4, 98, 153)\\\" (click)=\\\"goToRegisterPage()\\\">Create an account.</a>\\r\\n        </p>\\r\\n      </ion-card-content>\\r\\n    </ion-card>\\r\\n  </div>\\r\\n  <!-- Loading Spinner -->\\r\\n  <div style=\\\"position: absolute;\\r\\n              left: 50%;\\r\\n              transform: translateX(-50%);\\\">\\r\\n    <ion-spinner name=\\\"crescent\\\" color=\\\"primary\\\" style=\\\"height: 100px;\\r\\n                                                          width: 100px;\\\" *ngIf=\\\"loginLoadingSpinner\\\"></ion-spinner>\\r\\n  </div>\\r\\n  <div style=\\\"position: absolute; bottom: 0px; width: 100%;font-size: small;color:grey\\\">\\r\\n    <div style=\\\"text-align: center\\\"><i>THIS IS AN EDUCATIONAL PROJECT, CREDITS TO AUTHORS ARE ADDED WERE POSSIBLE,\\r\\n        DEVELOPED UNDER FAIR USE LICENSE FOR EDUCATIONAL\\r\\n        PURPOSES ONLY.</i>\\r\\n    </div>\\r\\n  </div>\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule { }","export default \".register {\\n  padding: 1px;\\n  height: 100%;\\n  width: 100%;\\n  background-image: url(/assets/images/backgrounds/login.png);\\n  background-repeat: no-repeat;\\n  background-size: cover; }\\n\\n.card {\\n  text-align: center;\\n  margin-top: 10%;\\n  font-size: x-large;\\n  opacity: 0.9; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vQzpcXFVzZXJzXFxyYW51bFxcRG9jdW1lbnRzXFxHaXRIdWJcXDJuZCBZZWFyXFwybmQgU2VtZXN0ZXJcXFVPUF9TRV9ZMlMyLVBVU0wyMDA4LUlOVFJPRFVDVElPTi1UTy1JTlRFUk5FVC1PRi1USElOR1NcXFdvcmtzcGFjZVxcaVNBTS9zcmNcXGFwcFxcbG9naW5cXGxvZ2luLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFlBQVk7RUFDWixZQUFZO0VBQ1osV0FBVztFQUNYLDJEQUEyRDtFQUMzRCw0QkFBNEI7RUFDNUIsc0JBQXFCLEVBQUE7O0FBR3pCO0VBQ0ssa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsWUFBWSxFQUFBIiwiZmlsZSI6InNyYy9hcHAvbG9naW4vbG9naW4ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnJlZ2lzdGVyIHtcclxuICAgIHBhZGRpbmc6IDFweDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC9hc3NldHMvaW1hZ2VzL2JhY2tncm91bmRzL2xvZ2luLnBuZyk7XHJcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgYmFja2dyb3VuZC1zaXplOmNvdmVyO1xyXG4gICAgIFxyXG59XHJcbi5jYXJkIHtcclxuICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgbWFyZ2luLXRvcDogMTAlO1xyXG4gICAgIGZvbnQtc2l6ZTogeC1sYXJnZTtcclxuICAgICBvcGFjaXR5OiAwLjk7XHJcbn1cclxuIl19 */\"","import { FirebaseService } from './../services/firebase.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { NavController, AlertController } from '@ionic/angular';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport * as firebase from 'firebase';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { Router } from '@angular/router';\r\n@Component({ selector: 'app-login', templateUrl: './login.page.html', styleUrls: ['./login.page.scss'] })\r\nexport class LoginPage implements OnInit {\r\n\r\n    validations_form: FormGroup;\r\n    errorMessage: string = '';\r\n    userEmail: string;\r\n    login:Boolean = false;\r\n    loginLoadingSpinner: Boolean = false;\r\n    loading: boolean;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        public navCtrl: NavController,\r\n        private authService: FirebaseService,\r\n        public loadingController: LoadingController,\r\n        private formBuilder: FormBuilder,\r\n        private alertController: AlertController\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.loading = true;\r\n        setTimeout(() => {\r\n            this.loading = false;\r\n            this.login = true;\r\n        }, 3000);\r\n\r\n        firebase.auth().onAuthStateChanged(async (user) => {\r\n            if (user) { // User is signed in.\r\n\r\n                // Setting loading spinner to spin\r\n                this.loginLoadingSpinner = true;\r\n\r\n                // console.log('User is signed in');\r\n                /*MOBILE APP */\r\n                // const loading = await this.loadingController.create({message: 'Please wait...', duration: 2000});\r\n                // await loading.present();\r\n\r\n                // const {role, data} = await loading.onDidDismiss();\r\n                // console.log('Loading dismissed!');\r\n\r\n                this.userEmail = this.authService.userDetails().email;\r\n\r\n\r\n                /*-- Lecturer User Registration Process Phase --*/\r\n                // console.log('Current router url: ', this.router.url);\r\n\r\n                // After new lecturer account is created, that user will be automatically logged in usder the program office user interface\r\n                // If the router url is the program office user interface and if the user type is 'lecturerUser', the currently logged in user will be logged out\r\n                if (this.router.url == '/office/lecturers') {\r\n\r\n                    let loggedUserDetails = this.authService.userDetails();\r\n                    // Checking if logged in user type in a lecturer user\r\n                    this.authService.retrieveLoggedInUserDetailsLecturer(loggedUserDetails.uid).subscribe(response => {\r\n                        if (response.length > 0) {\r\n                            // Logging out the current logged in user as the user type is 'lecturerUser' and it is in the program office user interface router url\r\n                            this.authService.logoutUser();\r\n                            // Redirecting user to the login screen\r\n                            this.router.navigate(['/login']);\r\n\r\n                            // console.log(\"Lecturer Registration: Record found in lecturer users collection, Logged out\");\r\n                        }\r\n                        else {\r\n                            // console.log(\"Record not found in lecturer users collection\");\r\n                        }\r\n                    }, error => {\r\n                        // console.log(\"Error: \" + error);\r\n                        this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                    });\r\n\r\n                }\r\n                /*-- Lecturer User Registration Process Phase --*/\r\n\r\n\r\n\r\n                const loggedInUserDetails = this.authService.userDetails();\r\n\r\n                /* Redirecting the user to their relevant user interface according to the user type */\r\n                // Checking if logged in user type in a student user\r\n                this.authService.retrieveLoggedInUserDetailsStudent(loggedInUserDetails.uid).subscribe(response => {\r\n                    if (response.length > 0) {\r\n\r\n                        /* Process of checking account status is ACTIVE or not */\r\n                        let resgisteredStudentUser = response;\r\n                        let studentUserAccountStatus;\r\n\r\n                        // Retrieving the account status of this student user account\r\n                        resgisteredStudentUser.forEach(document => {\r\n                            let firestoreDoc: any = document.payload.doc.data();\r\n                            studentUserAccountStatus = firestoreDoc.accountStatus;\r\n                        });\r\n\r\n                        // Checking if the student user account is active\r\n                        if(studentUserAccountStatus == \"Active\"){\r\n                            this.router.navigate(['student']);\r\n                            // console.log(\"Logged In User Type: Student User\");\r\n                            // console.log(\"Record found in student users collection\");\r\n                            // console.log(\"Student User Account is ACTIVE\");\r\n                        }\r\n                        else{\r\n                            this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                            this.authService.logoutUser();\r\n                            this.router.navigate([\"/login\"]);\r\n                            // console.log(\"Student User Account is not ACTIVE\");\r\n                        }\r\n\r\n\r\n                        // Setting loading spinner to stop spinning\r\n                        this.loginLoadingSpinner = false;\r\n                    }\r\n                    else {\r\n                        // console.log(\"Record not found in student users collection\");\r\n                    }\r\n                }, error => {\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n\r\n                    // console.log(\"Error: \" + error);\r\n                    this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                });\r\n\r\n                // Checking if logged in user type in a lecturer user\r\n                this.authService.retrieveLoggedInUserDetailsLecturer(loggedInUserDetails.uid).subscribe(response => {\r\n                    if (response.length > 0) {\r\n\r\n                        /* Process of checking account status is ACTIVE or not */\r\n                        let resgisteredLecturerUser = response;\r\n                        let lecturerUserAccountStatus;\r\n\r\n                        // Retrieving the account status of this lecturer user account\r\n                        resgisteredLecturerUser.forEach(document => {\r\n                            let firestoreDoc: any = document.payload.doc.data();\r\n                            lecturerUserAccountStatus = firestoreDoc.accountStatus;\r\n                        });\r\n\r\n                        // Checking if the lecturer user account is active\r\n                        if(lecturerUserAccountStatus == \"Active\"){\r\n                            this.router.navigate(['lecturer']);\r\n                            // console.log(\"Logged In User Type: Lecturer User\");\r\n                            // console.log(\"Record found in lecturer users collection\");\r\n                            // console.log(\"Lecturer User Account is ACTIVE\");\r\n                        }\r\n                        else{\r\n                            this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                            this.authService.logoutUser();\r\n                            this.router.navigate([\"/login\"]);\r\n                            // console.log(\"Lecturer User Account is not ACTIVE\");\r\n                        }\r\n\r\n\r\n                        // Setting loading spinner to stop spinning\r\n                        this.loginLoadingSpinner = false;\r\n                    }\r\n                    else {\r\n                        // console.log(\"Record not found in lecturer users collection\");\r\n                    }\r\n                }, error => {\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n\r\n                    // console.log(\"Error: \" + error);\r\n                    this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                });\r\n\r\n                // Checking if logged in user type in a program office user\r\n                this.authService.retrieveLoggedInUserDetailsProgramOffice(loggedInUserDetails.uid).subscribe(response => {\r\n                    if (response.length > 0) {\r\n\r\n                        /* Process of checking account status is ACTIVE or not */\r\n                        let resgisteredProgramOfficeUser = response;\r\n                        let programOfficeUserAccountStatus;\r\n\r\n                        // Retrieving the account status of this program office user account\r\n                        resgisteredProgramOfficeUser.forEach(document => {\r\n                            let firestoreDoc: any = document.payload.doc.data();\r\n                            programOfficeUserAccountStatus = firestoreDoc.accountStatus;\r\n                        });\r\n                        \r\n                        // Checking if the program office user account is active\r\n                        if(programOfficeUserAccountStatus == \"Active\"){\r\n\r\n                            this.router.navigate(['/office/dashboard']);\r\n                            // console.log(\"Logged In User Type: Program Office User\");\r\n                            // console.log(\"Record found in program office users collection\");\r\n                            // console.log(\"Program Office User Account is ACTIVE\");\r\n\r\n                        }\r\n                        else{\r\n                            this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact Web Administrator.\");\r\n                            this.authService.logoutUser();\r\n                            this.router.navigate([\"/login\"]);\r\n                            // console.log(\"Program Office User Account is not ACTIVE\");\r\n                        }\r\n\r\n\r\n                        // Setting loading spinner to stop spinning\r\n                        this.loginLoadingSpinner = false;\r\n                    }\r\n                    else {\r\n                        // console.log(\"Record not found in program office users collection\");\r\n                    }\r\n                }, error => {\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n\r\n                    // console.log(\"Error: \" + error);\r\n                    this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n                });\r\n\r\n\r\n            } else { // No user is signed in.\r\n\r\n                // Setting loading spinner to stop spinning\r\n                this.loginLoadingSpinner = false;\r\n\r\n                // console.log('User is NOT signed in');\r\n            }\r\n        },\r\n            error => {\r\n                // console.log(\"Error: \" + error);\r\n            }\r\n        );\r\n        this.validations_form = this.formBuilder.group({\r\n            email: new FormControl(\"\", Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')])),\r\n            password: new FormControl(\"\", Validators.compose([Validators.minLength(5), Validators.required]))\r\n        });\r\n    }\r\n\r\n    // Alert Box Implementation\r\n    async alertNotice(title: string, content: string) {\r\n\r\n        const alert = await this.alertController.create({\r\n            header: title,\r\n            message: content,\r\n            buttons: ['OK']\r\n        });\r\n\r\n        await alert.present();\r\n    }\r\n\r\n    validation_messages = {\r\n        email: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Your NSBM University Email is required.\"\r\n            }, {\r\n                type: \"pattern\",\r\n                message: \"Please enter a valid email.\"\r\n            }\r\n        ],\r\n        password: [\r\n            {\r\n                type: \"required\",\r\n                message: \"Password is required.\"\r\n            }, {\r\n                type: \"minlength\",\r\n                message: \"Password must be at least 5 characters long.\"\r\n            }\r\n        ]\r\n    };\r\n\r\n    async loginUser(value) {\r\n\r\n        // Setting loading spinner to spin\r\n        this.loginLoadingSpinner = true;\r\n        /*MOBILE APP */\r\n\r\n        // const loading = await this.loadingController.create({message: 'Logging in...', duration: 2000});\r\n\r\n        // await loading.present();\r\n\r\n        // const {role, data} = await loading.onDidDismiss();\r\n        // console.log('Loading dismissed!');\r\n\r\n\r\n\r\n\r\n        this.authService.loginUser(value).then(async res => {\r\n            // console.log(res);\r\n            this.errorMessage = \"\";\r\n            this.userEmail = this.authService.userDetails().email;\r\n\r\n            // this.router.navigate(['/office/dashboard']);\r\n            // this.router.navigate(['/student/eSign']);\r\n            // this.navCtrl.navigateForward(\"lecturerHome\");\r\n            // this.navCtrl.navigateForward(\"dashboard\");\r\n\r\n\r\n            const loggedInUserDetails = this.authService.userDetails();\r\n\r\n            /* Redirecting the user to their relevant user interface according to the user type */\r\n            // Checking if logged in user type in a student user\r\n            this.authService.retrieveLoggedInUserDetailsStudent(loggedInUserDetails.uid).subscribe(response => {\r\n                if (response.length > 0) {\r\n\r\n                    /* Process of checking account status is ACTIVE or not */\r\n                    let resgisteredStudentUser = response;\r\n                    let studentUserAccountStatus;\r\n\r\n                    // Retrieving the account status of this student user account\r\n                    resgisteredStudentUser.forEach(document => {\r\n                        let firestoreDoc: any = document.payload.doc.data();\r\n                        studentUserAccountStatus = firestoreDoc.accountStatus;\r\n                    });\r\n\r\n                    // Checking if the student user account is active\r\n                    if(studentUserAccountStatus == \"Active\"){\r\n                        this.router.navigate(['student']);\r\n                        // console.log(\"Logged In User Type: Student User\");\r\n                        // console.log(\"Record found in student users collection\");\r\n                        // console.log(\"Student User Account is ACTIVE\");\r\n                    }\r\n                    else{\r\n                        this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                        // console.log(\"Student User Account is not ACTIVE\");\r\n                    }\r\n\r\n\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n                }\r\n                else {\r\n                    // console.log(\"Record not found in student users collection\");\r\n                }\r\n            }, error => {\r\n                // console.log(\"Error: \" + error);\r\n                this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n            });\r\n\r\n            // Checking if logged in user type in a lecturer user\r\n            this.authService.retrieveLoggedInUserDetailsLecturer(loggedInUserDetails.uid).subscribe(response => {\r\n                if (response.length > 0) {\r\n\r\n                    /* Process of checking account status is ACTIVE or not */\r\n                    let resgisteredLecturerUser = response;\r\n                    let lecturerUserAccountStatus;\r\n\r\n                    // Retrieving the account status of this lecturer user account\r\n                    resgisteredLecturerUser.forEach(document => {\r\n                        let firestoreDoc: any = document.payload.doc.data();\r\n                        lecturerUserAccountStatus = firestoreDoc.accountStatus;\r\n                    });\r\n\r\n                    // Checking if the lecturer user account is active\r\n                    if(lecturerUserAccountStatus == \"Active\"){\r\n                        this.router.navigate(['lecturer']);\r\n                        // console.log(\"Logged In User Type: Lecturer User\");\r\n                        // console.log(\"Record found in lecturer users collection\");\r\n                        // console.log(\"Lecturer User Account is ACTIVE\");\r\n                    }\r\n                    else{\r\n                        this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact your specialized faculty program office.\");\r\n                        // console.log(\"Lecturer User Account is not ACTIVE\");\r\n                    }\r\n\r\n\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n                }\r\n                else {\r\n                    // console.log(\"Record not found in lecturer users collection\");\r\n                }\r\n            }, error => {\r\n                // console.log(\"Error: \" + error);\r\n                this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n            });\r\n\r\n            // Checking if logged in user type in a program office user\r\n            this.authService.retrieveLoggedInUserDetailsProgramOffice(loggedInUserDetails.uid).subscribe(response => {\r\n                if (response.length > 0) {\r\n\r\n                    /* Process of checking account status is ACTIVE or not */\r\n                    let resgisteredProgramOfficeUser = response;\r\n                    let programOfficeUserAccountStatus;\r\n\r\n                    // Retrieving the account status of this program office user account\r\n                    resgisteredProgramOfficeUser.forEach(document => {\r\n                        let firestoreDoc: any = document.payload.doc.data();\r\n                        programOfficeUserAccountStatus = firestoreDoc.accountStatus;\r\n                    });\r\n                    \r\n                    // Checking if the program office user account is active\r\n                    if(programOfficeUserAccountStatus == \"Active\"){\r\n\r\n                        this.router.navigate(['/office/dashboard']);\r\n                        // console.log(\"Logged In User Type: Program Office User\");\r\n                        // console.log(\"Record found in program office users collection\");\r\n                        // console.log(\"Program Office User Account is ACTIVE\");\r\n\r\n                    }\r\n                    else{\r\n                        this.alertNotice(\"Account Deactivated\", \"Account has been deactivated. Please contact Web Administrator.\");\r\n                        // console.log(\"Program Office User Account is not ACTIVE\");\r\n                    }\r\n\r\n\r\n                    // Setting loading spinner to stop spinning\r\n                    this.loginLoadingSpinner = false;\r\n                }\r\n                else {\r\n                    // console.log(\"Record not found in program office users collection\");\r\n                }\r\n            }, error => {\r\n                // console.log(\"Error: \" + error);\r\n                this.alertNotice(\"Error\", \"An error has occurred: \" + error);\r\n\r\n                // Setting loading spinner to stop spinning\r\n                this.loginLoadingSpinner = false;\r\n            });\r\n\r\n        }, err => {\r\n            // Setting loading spinner to stop spinning\r\n            this.loginLoadingSpinner = false;\r\n\r\n            this.errorMessage = err.message;\r\n        });\r\n    }\r\n\r\n\r\n    goToRegisterPage() {\r\n        this.navCtrl.navigateForward(\"signup\");\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"login-login-module-es5.js"}